/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.14 ./public/models/model.glb -o ./src/components/Avatar.jsx -r ./public/ --keepnames 
*/

import React, { useEffect, useRef, useState, useMemo } from 'react'
import { useAnimations, useFBX, useGLTF } from '@react-three/drei'
import axios from 'axios';
import * as THREE from "three";
import { useFrame, useLoader } from '@react-three/fiber';


const corresponding = {
	A: "viseme_PP",
	B: "viseme_kk",
	C: "viseme_I",
	D: "viseme_AA",
	E: "viseme_O",
	F: "viseme_U",
	G: "viseme_FF",
	H: "viseme_TH",
	X: "viseme_PP",
};

window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;

const recognition = new SpeechRecognition();
recognition.interimResults = false;

recognition.start();

recognition.addEventListener("end", () => {
	recognition.start();
});

export function Avatar(props) {
	const { nodes, materials } = useGLTF('/models/model.glb');

	const { animations: idle } = useFBX("/animations/Breathing Idle.fbx");
	// const { animations: laugh } = useFBX("/animations/Laughing.fbx");
	// const { animations: sad } = useFBX("/animations/Sad Idle.fbx");
	// const { animations: thanks } = useFBX("/animations/Thankful.fbx");
	// const { animations: wave } = useFBX("/animations/Waving.fbx");
	// const { animations: talk } = useFBX("/animations/Talking.fbx");

	idle[0].name = "Idle";
	// laugh[0].name = "Laugh";
	// sad[0].name = "Sad";
	// thanks[0].name = "Thanks";
	// wave[0].name = "Wave";
	// talk[0].name = "Talk";

	const [animation, setAnimation] = useState("Idle");
	const [audio, setAudio] = useState(null);
	const [lipsync, setLipsync] = useState(null);
	// const [stage, setStage] = useState('Listening');

	const group = useRef();
	console.log(idle[0]);
	const { actions } = useAnimations([idle[0]], group);

	useFrame(() => {
		if (audio && lipsync) {
			const currentTime = audio.currentTime;

			Object.values(corresponding).forEach((viseme) => {
				nodes.Wolf3D_Head.morphTargetInfluences[nodes.Wolf3D_Head.morphTargetDictionary[viseme]] = 0;
				nodes.Wolf3D_Teeth.morphTargetInfluences[nodes.Wolf3D_Teeth.morphTargetDictionary[viseme]] = 0;
			});

			for (let i = 0; i < lipsync.mouthCues.length; i++) {
				const mouthCue = lipsync.mouthCues[i];

				if (currentTime >= mouthCue.start && currentTime <= mouthCue.end) {
					nodes.Wolf3D_Head.morphTargetInfluences[nodes.Wolf3D_Head.morphTargetDictionary[corresponding[mouthCue.value]]] = 1;
					nodes.Wolf3D_Teeth.morphTargetInfluences[nodes.Wolf3D_Teeth.morphTargetDictionary[corresponding[mouthCue.value]]] = 1;
					console.log(mouthCue.value);
					break;
				}
			}
		}
	}, [animation]);

	useEffect(() => {
		recognition.addEventListener("result", async (e) => {
			e.preventDefault();
			console.log(`Transcribed results: ${e.results[0][0]['transcript']}`);
			const query = e.results[0][0]['transcript'];

			axios.post('http://localhost:3000/', {
				text: query
			}).then(async (res) => {
				console.log(res.data);
				const audio = new Audio("data:audio/wav;base64," + res.data.audio);
				const lipsync = res.data.jsonFile;

				setLipsync(lipsync);
				setAudio(audio);


			}).catch((err) => {
				console.log(err);
			});
		});
	}, [animation]);

	useEffect(() => {
		nodes.Wolf3D_Head.morphTargetInfluences[nodes.Wolf3D_Head.morphTargetDictionary["viseme_I"]] = 1;
		nodes.Wolf3D_Teeth.morphTargetInfluences[nodes.Wolf3D_Teeth.morphTargetDictionary["viseme_I"]] = 1;
		if (audio) {
			audio.play();
		}
		actions[animation].fadeIn(0).play();
		return () => actions[animation].fadeOut(0.5);
	}, [audio, animation]);

	return (
		<group {...props} dispose={null} ref={group}>
			<primitive object={nodes.Hips} />
			<skinnedMesh name="Wolf3D_Body" geometry={nodes.Wolf3D_Body.geometry} material={materials.Wolf3D_Body} skeleton={nodes.Wolf3D_Body.skeleton} />
			<skinnedMesh name="Wolf3D_Outfit_Bottom" geometry={nodes.Wolf3D_Outfit_Bottom.geometry} material={materials.Wolf3D_Outfit_Bottom} skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton} />
			<skinnedMesh name="Wolf3D_Outfit_Footwear" geometry={nodes.Wolf3D_Outfit_Footwear.geometry} material={materials.Wolf3D_Outfit_Footwear} skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton} />
			<skinnedMesh name="Wolf3D_Outfit_Top" geometry={nodes.Wolf3D_Outfit_Top.geometry} material={materials.Wolf3D_Outfit_Top} skeleton={nodes.Wolf3D_Outfit_Top.skeleton} />
			<skinnedMesh name="Wolf3D_Hair" geometry={nodes.Wolf3D_Hair.geometry} material={materials.Wolf3D_Hair} skeleton={nodes.Wolf3D_Hair.skeleton} />
			<skinnedMesh name="Wolf3D_Glasses" geometry={nodes.Wolf3D_Glasses.geometry} material={materials.Wolf3D_Glasses} skeleton={nodes.Wolf3D_Glasses.skeleton} />
			<skinnedMesh
				name="EyeLeft"
				geometry={nodes.EyeLeft.geometry}
				material={materials.Wolf3D_Eye}
				skeleton={nodes.EyeLeft.skeleton}
				morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
				morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
			/>
			<skinnedMesh
				name="EyeRight"
				geometry={nodes.EyeRight.geometry}
				material={materials.Wolf3D_Eye}
				skeleton={nodes.EyeRight.skeleton}
				morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
				morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
			/>
			<skinnedMesh
				name="Wolf3D_Head"
				geometry={nodes.Wolf3D_Head.geometry}
				material={materials.Wolf3D_Skin}
				skeleton={nodes.Wolf3D_Head.skeleton}
				morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
				morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
			/>
			<skinnedMesh
				name="Wolf3D_Teeth"
				geometry={nodes.Wolf3D_Teeth.geometry}
				material={materials.Wolf3D_Teeth}
				skeleton={nodes.Wolf3D_Teeth.skeleton}
				morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
				morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
			/>
		</group>
	)
}

useGLTF.preload('/models/model.glb')
